<?php

/**
 * @file
 *  LoginToboggan module
 *
 * This module enhances the configuration abilities of Drupal's default login system.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Session\AccountInterface;
use Drupal\logintoboggan\Utility\LogintobogganUtility;
use Drupal\user\Entity\User;


/**
 * @todo
 *
 */

/**
 * @wishlist
 *
 */

/**
 * @defgroup logintoboggan_core Core drupal hooks
 */
/**
 * Implement hook_cron().
 */
function logintoboggan_cron() {
  // If set password is enabled, and a purge interval is set, check for
  // unvalidated users to purge.
  if (($purge_interval = \Drupal::config('logintoboggan.settings')->get('purge_unvalidated_user_interval')) && Drupal::config('logintoboggan.settings')->get('user_email_verification')) {
    // As a safety check, make sure that we have a non-core role as the
    // trusted role -- otherwise skip.
    $anon_role = User::ANONYMOUS_ROLE;
    $auth_role = User::AUTHENTICATED_ROLE;
    $trusted_role = LogintobogganUtility::trustedRole();

    if (!in_array($trusted_role, array($anon_role, $auth_role))) {

      $request_time = \Drupal::time()->getRequestTime();
      $purge_time = $request_time - $purge_interval;

      $connection = Database::getConnection();

      $query = $connection->select('user__roles', 'r');
      $query->innerJoin('users_field_data', 'u', 'u.uid = r.entity_id');
      $query->fields('r', ['entity_id']);
      $query->condition('roles_target_id', '1', '=');
      $query->condition('created', $purge_time, '<');
      $result = $query->execute()->fetchAll();
      foreach($result as $k => $v) {
        $non_trusted[] = $v->entity_id;
      }

      $query_2 = $connection->select('user__roles', 'r');
      $query_2->innerJoin('users_field_data', 'u', 'u.uid = r.entity_id');
      $query_2->fields('r', ['entity_id']);
      $query_2->condition('roles_target_id', $trusted_role, '=');
      $query_2->condition('created', $purge_time, '<');
      $result_trusted = $query_2->execute()->fetchAll();
      foreach($result_trusted as $k => $v) {
        $trusted[] = $v->entity_id;
      }

      //overlaps are users with both role '1' and trusted user
      $got_both = array_intersect($non_trusted, $trusted);


      //build an array of uids that are not trusted and do not have trusted role
      $delete_users = [];
      foreach($non_trusted as $k => $v) {
        if (!in_array($v, $got_both)) {
          $delete_users[] = $v;
        }
      }

      $purged_users = [];
      $users = User::loadMultiple($delete_users);
      foreach($users as $u){
        $purged_users[] = $u->getAccountName();
      }
      $purged_users_list = join(', ', $purged_users);


      // Delete the users from the system.
      user_delete_multiple($delete_users);

      // Log the purged users.
      if (!empty($purged_users)) {
        \Drupal::logger('logintoboggan')->notice( 'Following unvalidated users removed: %purged', ['%purged' => $purged_users_list]);
      }
    }
  }
}

/**
 * Implement hook_help().
 */
function logintoboggan_help($path, $arg) {
  switch ($path) {
    case 'admin/help#logintoboggan':

      $output = t("<p>The Login Toboggan module improves the Drupal login system by offering the following features:
      <ol>
      <li>Allow users to login using either their username OR their e-mail address.</li>
      <li>Allow users to login immediately.</li>
      <li>Provide a login form on Access Denied pages for non-logged-in (anonymous) users.</li>
      <li>The module provides two login block options: One uses JavaScript to display the form within the block immediately upon clicking 'log in'. The other brings the user to a separate page, but returns the user to their original page upon login.</li>
      <li>Customize the registration form with two e-mail fields to ensure accuracy.</li>
      <li>Optionally redirect the user to a specific page when using the 'Immediate login' feature.</li>
      <li>Optionally redirect the user to a specific page upon validation of their e-mail address.</li>
      <li>Optionally display a user message indicating a successful login.</li>
      <li>Optionally combine both the login and registration form on one page.</li>
      <li>Optionally display an 'Request new password' link on the user login form.</li>
      <li>Optionally have unvalidated users purged from the system at a pre-defined interval (please read the CAVEATS section of INSTALL.txt for important information on configuring this feature!).</li>
      </ol>
      These features may be turned on or off in the Login Toboggan <a href=\":url\">settings</a>.</p>
      <p>Because this module completely reorients the Drupal login process you will probably want to edit the welcome e-mail on the <a href=\":user_settings\">user settings</a> page. Note when the 'Set password' option is enabled, the [user:validate-url] token becomes a verification url that the user MUST visit in order to enable authenticated status). The following is an example welcome e-mail:</p>
      ", array(':url' => url('admin/config/system/logintoboggan'), ':user_settings' => url('admin/config/people/accounts')));
      $example_help_form = \Drupal::formBuilder()->getForm('\Drupal\logintoboggan\Form\LogintobogganHelpForm');
      $output .= drupal_render($example_help_form);
      $output .= t("<p>Note that if you have set the 'Visitors can create accounts but administrator approval is required' option for account approval, and are also using the 'Set password' feature of LoginToboggan, the user will immediately receive the permissions of the pre-authorized user role. LoginToboggan prevents the pre-authorized role from automatically inheriting the authorized role permissions. You may wish to create a pre-authorized role with the exact same permissions as the anonymous user if you wish the newly created user to only have anonymous permissions.</p><p>In order for a site administrator to unblock a user who is awaiting administrator approval, they must either click on the validation link they receive in their notification e-mail, or manually remove the user from the site's pre-authorized role -- afterwards the user will then receive 'authenticated user' permissions. In either case, the user will receive an account activated e-mail if it's enabled on the user settings page -- it's recommended that you edit the default text of the activation e-mail to match LoginToboggan's workflow as described. </p><p>If you are using the 'Visitors can create accounts and no administrator approval is required' option, removal of the pre-authorized role will happen automatically when the user validates their account via e-mail.</p><p>Also be aware that LoginToboggan only affects registrations initiated by users--any user account created by an administrator will not use any LoginToboggan functionality.");
      return $output;
      break;
    case 'admin/config/system/logintoboggan':
      if ( \Drupal::moduleHandler()->moduleExists('help')) {
        $help_text =  t("More help can be found at <a href=\":help\">LoginToboggan help</a>.", array(':help' => url('admin/help/logintoboggan')));
      }
      else {
        $help_text = '';
      }
      $output = "<p>" . t("Customize your login and registration system.") . " $help_text</p>";
      return $output;
  }
}

/**
 * Implement hook_form_alter().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
    case 'user_login_form_block':

      // Grab the message from settings for display at the top of the login block.
      if ($login_msg = \Drupal::config('logintoboggan.settings')->get('login_block_message')) {

        $form['message'] = array(
          '#markup' => filter_xss_admin($login_msg),
          '#weight' => -50,
        );
      }
      if (\Drupal::config('logintoboggan.settings')->get('login_with_email')) {
        // Ensure a valid validate array.
        $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : array();
        // LT's validation function must run first.
        array_unshift($form['#validate'],'logintoboggan_user_login_validate');
        // Use theme functions to print the username field's textual labels.
        $lt_username_title = array('#theme' => 'lt_username_title', '#form_id' => $form_id,);
        $form['name']['#title'] = \Drupal::service('renderer')->render($lt_username_title);
        $lt_username_description = array('#theme' => 'lt_username_description', '#form_id' => $form_id,);
        $form['name']['#description'] = \Drupal::service('renderer')->render($lt_username_description);
        // Use theme functions to print the password field's textual labels.
        $lt_password_title = array('#theme' => 'lt_password_title', '#form_id' => $form_id,);
        $form['pass']['#title']       = \Drupal::service('renderer')->render($lt_password_title);
        $lt_password_description = array('#theme' => 'lt_password_description', '#form_id' => $form_id,);
        $form['pass']['#description'] = \Drupal::service('renderer')->render($lt_password_description);
      }

      if (($form_id == 'user_login_block')) {
        $block_type = \Drupal::config('logintoboggan.settings')->get('login_block_type');
        if ($block_type == 1) {
          // What would really be nice here is to start with a clean form, but
          // we can't really do that, because drupal_prepare_form() has already
          // been run, and we can't run it again in the _alter() hook, or we'll
          // get into and endless loop. Since we don't know exactly what's in
          // the form, strip out all regular form elements and the handlers.
          foreach (element_children($form) as $element) {
            unset($form[$element]);
            // OpenID expects this key, so provide it to prevent notices.
            if (module_exists("openid")) {
              $form['name']['#size'] = 0;
            }
          }
          unset($form['#validate'], $form['#submit']);
          $form['logintoboggan_login_link'] = array(
            '#markup' => l(_theme('lt_login_link'), 'user/login', array('query' => drupal_get_destination())),
          );
        }
        elseif ($block_type == 2) {
          $form  = _logintoboggan_toggleboggan($form);
        }
      }
      else {
        if (\Drupal::config('logintoboggan.settings')->get('logintoboggan_unified_login')) {
          $form['lost_password'] = array(
            '#markup' => '<div class="login-forgot">' . l(t('Request new password'), 'user/password') . '</div>',
          );
        }
      }
      break;
    case 'user_admin_settings':
      // Disable the checkbox at the Account settings page which controls
      // whether e-mail verification is required upon registration or not.
      // The LoginToboggan module implements e-mail verification functionality
      // differently than core, and will control wether e-mail verification is
      // required or not.
      $form['registration_cancellation']['user_email_verification']['#disabled'] = true;
      $form['registration_cancellation']['user_email_verification']['#description'] = t('This setting has been locked by the LoginToboggan module.
      You can change this setting by modifying the <strong>Set password</strong> checkbox at <a href=":link">LoginToboggan settings page</a>.', array(':link' => Url::fromRoute('logintobogganform.settings')->toString()));
      break;
  }
}

/**
 * Implement hook_form_block_admin_configure_alter().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_block_admin_configure_alter(&$form, $form_state) {
  if (($form['module']['#value'] == 'user') && ($form['delta']['#value'] == 'login')) {
    $form['#submit'][] = 'logintoboggan_user_block_admin_configure_submit';

    $form['settings']['title']['#description'] .= '<div id="logintoboggan-block-title-description">'. t('<strong>Note:</strong> Logintoboggan module is installed. If you are using one of the custom login block types below, it is recommended that you set this to <em>&lt;none&gt;</em>.') .'</div>';

    $form['settings']['logintoboggan_login_block_type'] = array(
      '#type' => 'radios',
      '#title' => t('Block type'),
      '#default_value' => \Drupal::config('logintoboggan.settings')->get('login_block_type'),
      '#options' => array(t('Standard'), t('Link'), t('Collapsible form')),
      '#description' => t("'Standard' is a standard login block, 'Link' is a login link that returns the user to the original page after logging in, 'Collapsible form' is a javascript collaspible login form."),
    );

    $form['settings']['logintoboggan_login_block_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Set a custom message to appear at the top of the login block'),
      '#default_value' => \Drupal::config('logintoboggan.settings')->get('logintoboggan_login_block_message', ''),
    );
  }
}



/**
 * Implement hook_form_user_pass_reset_alter().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_user_pass_reset_alter(&$form, $form_state) {
  // Password resets count as validating an email address, so remove the user
  // from the pre-auth role if they are still in it. We only want to run this
  // code when the user first hits the reset login form.
  $form['#submit'][] = 'logintoboggan_pass_reset';
  $path = \Drupal::request()->getpathInfo();
  $arg = explode('/',$path);
  $uid = $arg[3];
  //stctodo - does arg[5] ever exist?
  if ($arg[5] != 'login' && ($uid = (int) $arg[3])) {
    if ($account = user::load($uid)) {
      $roles = $account->getRoles();
      $trusted_role = LogintobogganUtility::trustedRole();
      $got_trusted = in_array($trusted_role, $roles);
      if (!$got_trusted) {
        _logintoboggan_process_validation($account);
        drupal_set_message(t('You have successfully validated your e-mail address.'));
      }
    }
  }
}



/*
 * submit function for pass reset
 */
function logintoboggan_pass_reset($form, $form_state) {
  $stop = '';
}


/**
 * Implement hook_form_user_admin_permissions_alter().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_user_admin_permissions_alter(&$form, &$form_state) {
  // If the trusted role isn't the auth user, then add it using js
  $trusted_role = LogintobogganUtility::trustedRole();
  $auth_role = User::AUTHENTICATED_ROLE;
  if ($trusted_role != $auth_role) {
    $form['#attached']['drupalSettings']['LoginToboggan']['preAuthID'] = $id;
  }
}

/**
 * Implement hook_js_alter().
 */
function logintoboggan_js_alter(&$javascript) {
  // Look for the user permissions js.
  if (isset($javascript['modules/user/user.permissions.js'])) {
    $trusted_role = LogintobogganUtility::trustedRole();
    // If the trusted role isn't the auth user, then swap out core's user
    // permissions js with LT's custom implementation. This is necessary to
    // prevent the trusted role's checkboxes from being automatically disabled
    // when the auth user's checkboxes are checked.
    $auth_role = User::AUTHENTICATED_ROLE;
    if ($trusted_role != $auth_role) {
      $javascript['modules/user/user.permissions.js']['data'] = drupal_get_path('module', 'logintoboggan') . '/logintoboggan.permissions.js';
    }
  }
}

/**
 * Implement hook_page_alter().
 */
function logintoboggan_page_alter(&$page) {
  // Remove blocks on access denied pages.
  if (isset($page['#logintoboggan_denied'])) {
    drupal_set_message(t('Access denied. You may need to login below or register to access this page.'), 'error');
    // Allow overriding the removal of the sidebars, since there's no way to
    // override this in the theme.
    if (\Drupal::config('logintoboggan.settings')->get('denied_remove_sidebars', TRUE)) {
      unset($page['sidebar_first'], $page['sidebar_second']);
    }
  }
}



/**
 * Custom validation for user login form
 *
 * @ingroup logintoboggan_form
 */
function logintoboggan_user_login_validate($form, &$form_state) {
  //stctodo - if I move the user_form_alter into a form controller, this ought to move to that class.

  if ($form_state->hasValue('name')) {
    $name = $form_state->getValue('name');
    $connection = Database::getConnection();
    $result = $connection->select('users_field_data', 'ufd')
      ->fields('ufd', ['name'])
      ->condition('mail', $name, 'like')
      ->execute()
      ->fetchfield();
    if($result){
      $form_state->setValue('name', $result);
    }
  }
}



/**
 * Implementation of hook_menu_alter().
 */
function logintoboggan_menu_alter(&$callbacks) {
  if (\Drupal::config('logintoboggan.settings')->get('unified_login')) {
    // Kill the tabs on the login pages.
    $callbacks['user/login']['type'] = MENU_NORMAL_ITEM;
    $callbacks['user/login']['page callback'] = 'logintoboggan_unified_login_page';
    $callbacks['user/register']['type'] = MENU_CALLBACK;
    $callbacks['user/register']['page callback'] = 'logintoboggan_unified_login_page';
    $callbacks['user/register']['page arguments'] = array('register');
    $callbacks['user/password']['type'] = MENU_CALLBACK;
    $callbacks['user']['page callback'] = 'logintoboggan_unified_login_page';
  }
}

/**
 * Implemenation of hook_theme().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_theme($existing, $type, $theme, $path) {
  return array(
    'lt_username_title' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_username_description' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_password_title' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_password_description' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_access_denied' => array(
      'variables' => array(),
    ),
    'lt_loggedinblock' => array(
      'variables' => array('account' => NULL),
    ),
    'lt_login_link' => array(
      'variables' => array(),
    ),
    'lt_login_successful_message' => array(
      'variables' => array('account' => NULL),
    ),
    'lt_unified_login_page' => array(
      'variables' => array(
        'login_form' => NULL,
        'register_form' => NULL,
        'active_form' => NULL,
      ),
    ),
  );
}

/**
 * @defgroup logintoboggan_block Functions for LoginToboggan blocks.
 */

function logintoboggan_user_block_admin_configure_submit($form, &$form_state) {
  variable_set('logintoboggan_login_block_type', $form_state['values']['logintoboggan_login_block_type']);
  variable_set('logintoboggan_login_block_message', $form_state['values']['logintoboggan_login_block_message']);
}

/**
 * User login block with JavaScript to expand
 *
 * this should really be themed
 *
 * @return array
 *   the reconstituted user login block
 */

function _logintoboggan_toggleboggan ($form) {

  $form['#attached']['js'][] = drupal_get_path('module', 'logintoboggan') .'/logintoboggan.js';

  $pre = '<div id="toboggan-container" class="toboggan-container">';
  $options = array(
    'attributes' => array(
      'id' => 'toboggan-login-link',
      'class' => array('toboggan-login-link'),
    ),
    'query' => drupal_get_destination(),
  );
  $pre .= '<div id="toboggan-login-link-container" class="toboggan-login-link-container">';
  $pre .= l(_theme('lt_login_link'), 'user/login', $options);
  $pre .= '</div>';

  //the block that will be toggled
  $pre .= '<div id="toboggan-login" class="user-login-block">';

  $form['pre'] = array('#markup' => $pre, '#weight' => -300);
  $form['post'] = array('#markup' => '</div></div>', '#weight' => 300);
  return $form;
}

/**
 * Builds a unified login form.
 *
 * @param $active_form
 *   Which form to display, should be 'login' or 'register'.
 */
function logintoboggan_unified_login_form($active_form = 'login') {
  $login_form = \Drupal::formBuilder()->getForm('Drupal\user\Form\UserLoginForm');
//  $login_form['#attached']['js'][] = drupal_get_path('module', 'logintoboggan') .'/logintoboggan.unifiedlogin.js';
//  $login_form['#attached']['js'][] = array(
//    'data' => array(
//      'LoginToboggan' => array(
//        'unifiedLoginActiveForm' => $active_form,
//      ),
//    ),
//    'type' => 'setting',
//  );
  $register_form = \Drupal::entityManager()->getForm(entity_create('user', array()), 'register');
  $rendered_login_form = drupal_render($login_form);
  $rendered_register_form = drupal_render($register_form);
  $variables = array(
    'login_form' => $rendered_login_form,
    'register_form' => $rendered_register_form,
    'active_form' => $active_form,
  );
  $output = _theme('lt_unified_login_page', $variables);
  return $output;
}


/**
 * Returns an appropriate authentication form based on the configuration.
 *
 * @param $active_form
 *   Which form to display, should be 'login' or 'register'.
 */
function logintoboggan_get_authentication_form($active_form = 'login') {
  $output = '';
  if (\Drupal::config('logintoboggan.settings')->get('unified_login')) {
    $output = logintoboggan_unified_login_form($active_form);
    drupal_set_message('<pre>' . 'olol' . '</pre>');
  }
  elseif ($active_form == 'login') {
    $output = \Drupal::formBuilder()->getForm('\Drupal\user\Form\UserLoginForm');
  }
  elseif ($active_form == 'register') {
    $output = \Drupal::entityManager()->getForm(entity_create('user', array()), 'register');
  }
//  drupal_set_message('<pre>' . print_r($output,1) . '</pre>');
  return $output;
}


/**
 * Add trusted role to new user when validating from an email link.
 *
 * @param $account
 *
 */
function _logintoboggan_process_validation($account) {
  $trusted_role = LogintobogganUtility::trustedRole();
  //core mail verification not required and trusted <> authenticated so add the role
  $trusted_used = !\Drupal::config('user.settings')->get('verify_mail') && $trusted_role != AccountInterface::AUTHENTICATED_ROLE;
  if (!$account->isBlocked()) {
    if ($trusted_used) {
      $account->addRole($trusted_role);
      $account->save();
    }
  }
}

/**
 * Actually log the user on
 *
 * @param object $account
 *   The user object.
 * @param array $edit
 *   An array of form values if a form has been submitted.
 * @param array $redirect
 *   An array of key/value pairs describing a redirect location, in the form
 *   that drupal_goto() will understand. Defaults to:
 *     'path' => 'user/'. $user->uid
 *     'query' => NULL
 *     'fragment' => NULL
 */
function logintoboggan_process_login($account, $redirect = FALSE) {
  user_login_finalize($account);

  // In the special case where a user is validating but they did not create their
  // own password, show a user message letting them know to change their password.
  if (\Drupal::config('user.settings')->get('verify_mail')) {
    watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->getUsername(), '%timestamp' => REQUEST_TIME));
    drupal_set_message(t('You have just used your one-time login link. It is no longer possible to use this link to login. Please change your password.'));
  }

  if (!empty($redirect)) {
    return $redirect;
  }

  return Url::fromRoute('user.edit', array('user' => $account->id()));
}



function logintoboggan_eml_validate_url($account, $url_options) {
  $request_time = \Drupal::time()->getRequestTime();
  return Url::fromUserInput('/user/validate/' . $account->id() . '/' . $request_time . '/' . logintoboggan_eml_rehash($account, $request_time), $url_options)->toString();
}

function logintoboggan_eml_rehash($account, $timestamp) {
  return user_pass_rehash($account, $timestamp);
}

/**
 * Implement hook_user_login().
 */
function logintoboggan_user_login($account) {
  if (\Drupal::config('logintoboggan.settings')->get('redirect_on_confirm')) {
    drupal_set_message(_theme('login_successful_message', array('account' => $account)));
  }
  if (\Drupal::config('logintoboggan.settings')->get('login_successful_message')) {
    drupal_set_message(t('login successful for %user', array('%user'=>$account->get('name')->value,)));
  }
  drupal_static_reset('user_access');
}



function _logintoboggan_protocol() {
  return ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http');
}

/**
 * Transforms a URL fragment into a redirect array understood by drupal_goto().
 *
 * stctodo - move this into utility class, assuming it gets called by different operations.
 *
 * @param $redirect
 *   The redirect string.
 * @param $account
 *   The user account object associated with the redirect.
 */
function _logintoboggan_process_redirect($redirect, $account) {
  $variables = array('%uid' => $account->id());
  $redirect = parse_url(urldecode(strtr($redirect, $variables)));
  $redirect = UrlHelper::parse($redirect['path']);

  // If there's a path set, override the destination parameter if necessary.
  if ($redirect['path'] && \Drupal::config('logintoboggan.settings')->get('override_destination_parameter')) {
    unset($_GET['destination']);
  }

  // Explicitly create query and fragment elements if not present already.
  $query = isset($redirect['query']) ? $redirect['query'] : array();
  $fragment = isset($redirect['fragment']) ? $redirect['fragment'] : '';
  $var_url = Url::fromUserInput('/' . $redirect['path'], array('query' => $query, 'fragment' => $fragment));
  return Url::fromUserInput('/' . $redirect['path'], ['query' => $query, 'fragment' => $fragment]);
}

/**
 *
 * stctodo-this generates a link that causes a redirect url error
 *
 * Implement hook_mail_alter().
 */
function logintoboggan_mail_alter(&$message) {
  $stop = '';
  if ($message['id'] == 'user_register_pending_approval_admin') {
    $reg_pass_set = !\Drupal::config('user.settings')->get('verify_mail');
    if ($reg_pass_set) {
      $account = $message['params']['account'];
      $url_options = array('absolute' => TRUE);
      $language = $message['language'];
      $langcode = isset($language->language) ? $language->language : NULL;
      $message['body'][] = t("\n\nTo give the user full site permissions, 
      click the link below:\n\n:validation_url/admin\n\nAlternatively, you may visit their user account listed above 
      and assign the trusted role.", array(':validation_url' => logintoboggan_eml_validate_url($account, $url_options)), array('langcode' => $langcode));
    }
  }
}

/**
 *
 * THEME FUNCTIONS!
 *
 * You may override and change any of these custom HTML output functions
 * by copy/pasting them into your template.php file, at which point you can
 * customize anything, provided you are using the default phptemplate engine.
 *
 * For more info on overriding theme functions, see http://drupal.org/node/55126
 */

/**
 * Theme the username title of the user login form
 * and the user login block.
 */
function template_preprocess_lt_username_title(&$variables) {
  switch ($variables['form_id']) {
    case 'user_login_form':
      // Label text for the username field on the /user/login page.
      $variables['label'] = 'Username or e-mail address';
      break;

    case 'user_login_block':
      // Label text for the username field when shown in a block.
      $variables['label'] = 'Username or e-mail';
      break;
  }
}

/**
 * Theme the username description of the user login form
 * and the user login block.
 */
function template_preprocess_lt_username_description(&$variables) {
  switch ($variables['form_id']) {
    case 'user_login_form':
      // The username field's description when shown on the /user/login page.
      $variables['description'] = 'You may login with either your assigned username or your e-mail address.';
      break;
    case 'user_login_block':
      $variables['description'] = '';
      break;
  }
}

/**
 * Theme the password title of the user login form
 * and the user login block.
 */
function template_preprocess_lt_password_title(&$variables) {
  // Label text for the password field.
  $variables['label'] = 'Password';
}

/**
 * Theme the password description of the user login form
 * and the user login block.
 */
function template_preprocess_lt_password_description(&$variables) {
  switch ($variables['form_id']) {
    case 'user_login_form':
      // The password field's description on the /user/login page.
      $variables['description'] = 'The password field is case sensitive.';
      break;

    case 'user_login_block':
      // If showing the login form in a block, don't print any descriptive text.
      $variables['description'] = NULL;
      break;
  }
}

/**
 * Theme the Access Denied message.
 */
function template_preprocess_lt_access_denied(&$variables) {
  $variables['access_denied'] = 'You are not authorized to access this page.';
}

/**
 * Theme the loggedinblock that shows for logged-in users.
 */
function template_preprocess_lt_loggedinblock(&$variables){
  $url = Url::fromRoute('user.logout');
  $variables['loggedinblock'] = \Drupal::theme()->render('username', array('account' => $variables['account'])) .' | ' . \Drupal::l(t('Log out'), $url);
}

/**
 * Custom theme function for the login/register link.
 */
function template_preprocess_lt_login_link(&$variables) {
  // Only display register text if registration is allowed.
  if (\Drupal::config('user.settings')->get('admin_role')) {
    $variables['login_link_text'] = t('Log in/Register');
  }
  else {
    $variables['login_link_text'] = t('Log in');
  }
}

/**
 * Theme the login successful message.
 *
 * @param $account
 *   A user object representing the user being logged in.
 */
function template_preprocess_lt_login_successful_message(&$variables) {
  $variables['login_successful_message'] =  t('Log in successful for %name.', array('%name' => format_username($variables['account'])));
}

/**
 * Theme function for unified login page.
 *
 * @ingroup themable
 */
function template_preprocess_lt_unified_login_page(&$variables) {

  $login_form = $variables['login_form'];
  $register_form = $variables['register_form'];
  $active_form = $variables['active_form'];
  $output = '';

  $output .= '<div class="toboggan-unified ' . $active_form . '">';

  // Create the initial message and links that people can click on.
  $output .= '<div id="login-message">' . t('You are not logged in.') . '</div>';
  $output .= '<div id="login-links">';
  $output .= l(t('I have an account'), 'user/login', array('attributes' => array('class' => array('login-link'), 'id' => 'login-link')));
  $output .= ' ';
  $output .= l(t('I want to create an account'), 'user/register', array('attributes' => array('class' => array('login-link'), 'id' => 'register-link')));

  $output .= '</div>';

  // Add the login and registration forms in.
  $output .= '<div id="login-form">' . $login_form . '</div>';
  $output .= '<div id="register-form">' . $register_form . '</div>';

  $output .= '</div>';

  $variables['lt_unified_login_page'] = $output;
}

/**
 * @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[]
 */
function logintoboggan_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setFormClass('register', 'Drupal\logintoboggan\Form\LogintobogganRegister');
  $entity_types['user']->setFormClass('default', 'Drupal\logintoboggan\Form\LogintobogganProfileForm');
}


/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function logintoboggan_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user'  && !empty($fields['name'])) {
    $fields['name']->addConstraint('LogintobogganMailName', []);
  }

  if ($entity_type->id() == 'user'  && !empty($fields['pass'])) {
    $fields['pass']->addConstraint('LogintobogganPasswordLength', []);
  }
}