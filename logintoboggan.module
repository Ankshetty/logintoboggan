<?php

/**
 * @file
 *  LoginToboggan module
 *
 * This module enhances the configuration abilities of Drupal's default login system.
 *
 *
 * stctodo - ensure consistency for all function annotations
 * - remove unused dependency injections across all files
 * - remove contrib sub modules; put them in legacy code will probably need to fix git to stop tracking them
 * - check code with coder module
 *
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Session\AccountInterface;
use Drupal\logintoboggan\Utility\LogintobogganUtility;
use Drupal\user\Entity\User;


/**
 * @defgroup logintoboggan_core Core drupal hooks
 */
/**
 * Implement hook_cron().
 */
function logintoboggan_cron() {
  // If set password is enabled, and a purge interval is set, check for unvalidated users to purge.
  if (($purge_interval = \Drupal::config('logintoboggan.settings')->get('purge_unvalidated_user_interval'))
    && Drupal::config('logintoboggan.settings')->get('user_email_verification')) {
    // As a safety check, make sure that we have a non-core role as the
    // trusted role -- otherwise skip.
    $anon_role = User::ANONYMOUS_ROLE;
    $auth_role = User::AUTHENTICATED_ROLE;
    $trusted_role = LogintobogganUtility::trustedRole();

    if (!in_array($trusted_role, array($anon_role, $auth_role))) {
      $request_time = \Drupal::time()->getRequestTime();
      $purge_time = $request_time - $purge_interval;

      $connection = Database::getConnection();

      $query = $connection->select('user__roles', 'r');
      $query->innerJoin('users_field_data', 'u', 'u.uid = r.entity_id');
      $query->fields('r', ['entity_id']);
      $query->condition('roles_target_id', '1', '=');
      $query->condition('created', $purge_time, '<');
      $result = $query->execute()->fetchAll();
      foreach($result as $k => $v) {
        $non_trusted[] = $v->entity_id;
      }

      $query_2 = $connection->select('user__roles', 'r');
      $query_2->innerJoin('users_field_data', 'u', 'u.uid = r.entity_id');
      $query_2->fields('r', ['entity_id']);
      $query_2->condition('roles_target_id', $trusted_role, '=');
      $query_2->condition('created', $purge_time, '<');
      $result_trusted = $query_2->execute()->fetchAll();
      foreach($result_trusted as $k => $v) {
        $trusted[] = $v->entity_id;
      }

      //overlaps are users with both role '1' and trusted user
      $got_both = array_intersect($non_trusted, $trusted);

      //build an array of uids that are not trusted and do not have trusted role
      $delete_users = [];
      foreach($non_trusted as $k => $v) {
        if (!in_array($v, $got_both)) {
          $delete_users[] = $v;
        }
      }

      $purged_users = [];
      $users = User::loadMultiple($delete_users);
      foreach($users as $u){
        $purged_users[] = $u->getAccountName();
      }
      $purged_users_list = join(', ', $purged_users);

      // Delete the users from the system.
      user_delete_multiple($delete_users);

      // Log the purged users.
      if (!empty($purged_users)) {
        \Drupal::logger('logintoboggan')->notice( 'Following unvalidated users removed: %purged', ['%purged' => $purged_users_list]);
      }
    }
  }
}


/**
 * Implement hook_help().
 */
function logintoboggan_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.logintoboggan':
      $output = t("<p>The Login Toboggan module improves the Drupal login system by offering the following features:
      <ol>
      <li>Allow users to login using either their username OR their e-mail address.</li>
      <li>Allow users to login immediately.</li>
      <li>Provide a login form on Access Denied pages for non-logged-in (anonymous) users.</li>
      <li>The module provides two login block options: One uses JavaScript to display the form within the block immediately upon clicking 'log in'. The other brings the user to a separate page, but returns the user to their original page upon login.</li>
      <li>Customize the registration form with two e-mail fields to ensure accuracy.</li>
      <li>Optionally redirect the user to a specific page when using the 'Immediate login' feature.</li>
      <li>Optionally redirect the user to a specific page upon validation of their e-mail address.</li>
      <li>Optionally display a user message indicating a successful login.</li>
      <li>Optionally combine both the login, registration and password reset forms on one page.</li>
      <li>Optionally have unvalidated users purged from the system at a pre-defined interval (please read the CAVEATS section of INSTALL.txt for important information on configuring this feature!).</li>
      </ol>
      These features may be turned on or off in the Login Toboggan <a href=\":url\">settings</a>.</p>
      <p>Because this module completely reorients the Drupal login process you will probably want to edit the welcome e-mail on the <a href=\":user_settings\">user settings</a> page. Note when the 'Set password' option is enabled, the [user:validate-url] token becomes a verification url that the user MUST visit in order to enable authenticated status). The following is an example welcome e-mail:</p>
      ", array(':url' => Url::fromRoute('logintobogganform.settings')->toString(), ':user_settings' => Url::fromRoute('entity.user.admin_form')->toString()));
      $example_help_form = \Drupal::formBuilder()->getForm('\Drupal\logintoboggan\Form\LogintobogganHelpForm');
      $output .=  \Drupal::service('renderer')->render($example_help_form);
      $output .= t("<p>Note that if you have set the 'Visitors can create accounts but administrator approval is required' option for account approval, and are also using the 'Set password' feature of LoginToboggan, the user will immediately receive the permissions of the pre-authorized user role. LoginToboggan prevents the pre-authorized role from automatically inheriting the authorized role permissions. You may wish to create a pre-authorized role with the exact same permissions as the anonymous user if you wish the newly created user to only have anonymous permissions.</p><p>In order for a site administrator to unblock a user who is awaiting administrator approval, they must either click on the validation link they receive in their notification e-mail, or manually remove the user from the site's pre-authorized role -- afterwards the user will then receive 'authenticated user' permissions. In either case, the user will receive an account activated e-mail if it's enabled on the user settings page -- it's recommended that you edit the default text of the activation e-mail to match LoginToboggan's workflow as described. </p><p>If you are using the 'Visitors can create accounts and no administrator approval is required' option, removal of the pre-authorized role will happen automatically when the user validates their account via e-mail.</p><p>Also be aware that LoginToboggan only affects registrations initiated by users--any user account created by an administrator will not use any LoginToboggan functionality.");
      return $output;
      break;
  }
}


/**
 * Implements hook_entity_type_alter().
 *
 * Overrides core registration and user edit forms
 *
 * @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[]
 */
function logintoboggan_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setFormClass('register', 'Drupal\logintoboggan\Form\LogintobogganRegister');
  $entity_types['user']->setFormClass('default', 'Drupal\logintoboggan\Form\LogintobogganProfileForm');
}


/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Adds constraints to user name and password. Done in preference to form_alter
 * as these fields set entity values in database.
 */
function logintoboggan_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user'  && !empty($fields['name'])) {
    $fields['name']->addConstraint('LogintobogganMailName', []);
  }

  if ($entity_type->id() == 'user'  && !empty($fields['pass'])) {
    $fields['pass']->addConstraint('LogintobogganPasswordLength', []);
  }
}


/**
 * Implement hook_form_alter().
 *
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      if (\Drupal::config('logintoboggan.settings')->get('login_with_email')) {
        // Ensure a valid validate array.
        $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : [];
        // LT's validation function must run first.
        array_unshift($form['#validate'],'logintoboggan_user_login_validate');
        // Use theme functions to print the username field's textual labels.
        $lt_username_title = array('#theme' => 'lt_username_title', '#form_id' => $form_id,);
        $form['name']['#title'] = \Drupal::service('renderer')->render($lt_username_title);
        $lt_username_description = array('#theme' => 'lt_username_description', '#form_id' => $form_id,);
        $form['name']['#description'] = \Drupal::service('renderer')->render($lt_username_description);
        // Use theme functions to print the password field's textual labels.
        $lt_password_title = array('#theme' => 'lt_password_title', '#form_id' => $form_id,);
        $form['pass']['#title'] = \Drupal::service('renderer')->render($lt_password_title);
        $lt_password_description = ['#theme' => 'lt_password_description', '#form_id' => $form_id,];
        $form['pass']['#description'] = \Drupal::service('renderer')->render($lt_password_description);
      }
      break;

    case 'user_admin_settings':
      // Disable the checkbox at the Account settings page which controls
      // whether e-mail verification is required upon registration or not.
      // The LoginToboggan module implements e-mail verification functionality
      // differently than core, and will control wether e-mail verification is
      // required or not.
      $form['registration_cancellation']['user_email_verification']['#disabled'] = true;
      $form['registration_cancellation']['user_email_verification']['#description'] = t('This setting has been 
      locked by Logintoboggan.
      You can change this setting by modifying the <strong>Set password</strong> checkbox 
      at <a href=":link">LoginToboggan settings page</a>.', array(':link' => Url::fromRoute('logintobogganform.settings')->toString()));
      break;
  }
}


/**
 *
 *
 * Implement hook_form_user_pass_reset_alter().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_user_pass_reset_alter(&$form, $form_state) {
  // Password resets count as validating an email address, so add trusted role.
  //We only want to run this code when the user first hits the reset login form.
  $path = \Drupal::request()->getpathInfo();
  $arg = explode('/',$path);
  if ($uid = (int) $arg[3]) {
    if ($account = user::load($uid)) {
      $roles = $account->getRoles();
      $trusted_role = LogintobogganUtility::trustedRole();
      $got_trusted = in_array($trusted_role, $roles);
      if (!$got_trusted) {
        LogintobogganUtility::processValidation($account);
        \Drupal::messenger()->addMessage(t('You have successfully validated your e-mail address.'), 'status');
      }
    }
  }
}


/**
 * Implement hook_form_user_admin_permissions_alter().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_form_user_admin_permissions_alter(&$form, &$form_state) {
  // If the trusted role isn't the auth user, then add it using js
  $trusted_role = LogintobogganUtility::trustedRole();
  $auth_role = User::AUTHENTICATED_ROLE;
  if ($trusted_role != $auth_role) {
    $form['#attached']['drupalSettings']['LoginToboggan']['trustedID'] = $auth_role;
  }
}

/**
 *
 * Implement hook_js_alter().
 */
function logintoboggan_js_alter(&$javascript) {
  // Look for the user permissions js.
  if (isset($javascript['modules/user/user.permissions.js'])) {
    $trusted_role = LogintobogganUtility::trustedRole();
    // If the trusted role isn't the auth user, then swap out core's user
    // permissions js with LT's custom implementation. This is necessary to
    // prevent the trusted role's checkboxes from being automatically disabled
    // when the auth user's checkboxes are checked.
    $auth_role = User::AUTHENTICATED_ROLE;
    if ($trusted_role != $auth_role) {
      $javascript['modules/user/user.permissions.js']['data'] = drupal_get_path('module', 'logintoboggan') . '/js/logintoboggan.permissions.js';
    }
  }
}


/**
 * Custom validation for user login form
 *
 * @ingroup logintoboggan_form
 */
function logintoboggan_user_login_validate($form, &$form_state) {
  if ($form_state->hasValue('name')) {
    $name = $form_state->getValue('name');
    $connection = Database::getConnection();
    $result = $connection->select('users_field_data', 'ufd')
      ->fields('ufd', ['name'])
      ->condition('mail', $name, 'like')
      ->execute()
      ->fetchfield();
    if($result){
      $form_state->setValue('name', $result);
    }
  }
}


/**
 * Implemenation of hook_theme().
 *
 * @ingroup logintoboggan_core
 */
function logintoboggan_theme($existing, $type, $theme, $path) {
  return array(
    'lt__status_messages' => [
      'base_hook' => 'status_messages',
    ],
    'lt_username_title' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_username_description' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_password_title' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_password_description' => array(
      'variables' => array('form_id' => NULL),
    ),
    'lt_access_denied' => array(
      'variables' => array(),
    ),
    'lt_loggedinblock' => array(
      'variables' => array('account' => NULL),
    ),
    'lt_login_block' => [
      'render element' => 'elements',
    ],
    'lt_login_link' => array(
      'variables' => array(),
    ),
    'lt_unified_login_button' => [
      'variables' => [],
    ],
  );
}


/**
 * Actually log the user on
 *
 * sctodo - as there's not much left in this
 * might be a case for utility. Actually, it only gets called once so maybe just
 * move its functionality into the controller.
 *
 * @param object $account
 *   The user object.
 * @param array $edit
 *   An array of form values if a form has been submitted.
 * @param array $redirect
 *   An array of key/value pairs describing a redirect location, in the form
 *   that drupal_goto() will understand. Defaults to:
 *     'path' => 'user/'. $user->uid
 *     'query' => NULL
 *     'fragment' => NULL
 */
function logintoboggan_process_login($account, $redirect = FALSE) {
  user_login_finalize($account);
  // In the special case where a user is validating but they did not create their
  // own password, show a user message letting them know to change their password.
  if (\Drupal::config('user.settings')->get('verify_mail')) {
    $request_time = \Drupal::time()->getRequestTime();
    \Drupal::logger('user')->notice( 'User %name used one-time login link at time %timestamp.',
      ['%name' => $account->getUsername(), '%timestamp' => $request_time]);
    \Drupal::messenger()->addMessage(t('You have just used your one-time login link.
     It is no longer possible to use this link to login. Please change your password.'), 'status');
  }

  if (!empty($redirect)) {
    return $redirect;
  }

  return Url::fromRoute('user.edit', array('user' => $account->id()));
}

/**
 *
 * Implement hook_user_login().
 */
function logintoboggan_user_login($account) {
  $redirect_on_confirm = \Drupal::config('logintoboggan.settings')->get('redirect_on_confirm');
  $login_message = \Drupal::config('logintoboggan.settings')->get('login_successful_message');
  if ($redirect_on_confirm || $login_message) {
    \Drupal::messenger()->addMessage(t('login successful for %user',
      ['%user' => $account->get('name')->value]), 'status');
  }
}


/**
 * THEME FUNCTIONS
 *
 * You may override and change any of these custom HTML output functions
 * by copy/pasting them into your theme file, at which point you can
 * customize anything, provided you are using the default Twig engine.
 *
 */

/**
 * Theme the username title of the user login form
 * and the user login block.
 */
function template_preprocess_lt_username_title(&$variables) {
  switch ($variables['form_id']) {
    case 'user_login_form':
      // Label text for the username field on the /user/login page.
      $variables['label'] = 'Username or e-mail address';
      break;

    case 'user_login_block':
      // Label text for the username field when shown in a block.
      $variables['label'] = 'Username or e-mail';
      break;
  }

}


/**
 * Preprocess block to pass content into variables[content]
 *
 * @param $variables
 */
function template_preprocess_lt_login_block(&$variables) {
  $variables['content'] = $variables['elements']['content'];
}


/**
 * Theme the username description of the user login form
 * and the user login block.
 */
function template_preprocess_lt_username_description(&$variables) {
  switch ($variables['form_id']) {
    case 'user_login_form':
      // The username field's description when shown on the /user/login page.
      $variables['description'] = t('You may login with either your assigned username or your e-mail address.');
      break;
    case 'user_login_block':
      $variables['description'] = '';
      break;
  }
}


/**
 * Theme the password title of the user login form
 * and the user login block.
 */
function template_preprocess_lt_password_title(&$variables) {
  // Label text for the password field.
  $variables['label'] = 'Password';
}


/**
 * Theme the password description of the user login form
 * and the user login block.
 */
function template_preprocess_lt_password_description(&$variables) {
  switch ($variables['form_id']) {
    case 'user_login_form':
      // The password field's description on the /user/login page.
      $min_pass_length = \Drupal::config('logintoboggan.settings')->get('minimum_password_length');
      if($min_pass_length != '0') {
        $variables['description'] = t('The password field is case sensitive, 
         minimum length %min characters.', ['%min' => $min_pass_length]);
      } else {
        $variables['description'] = t('The password field is case sensitive.');
      }

      break;

    case 'user_login_block':
      // If showing the login form in a block, don't print any descriptive text.
      $variables['description'] = NULL;
      break;
  }
}


/**
 * Themes the Access Denied message for logged-in users
 *
 * Copy this to your own theme if you want to set a site-specific message
 */
function template_preprocess_lt_access_denied(&$variables) {
  $variables['access_denied'] = t('You are not authorized to access this page.');
}


/**
 * Theme the loggedinblock that shows for logged-in users.
 */
function template_preprocess_lt_loggedinblock(&$variables) {
  $url = Url::fromRoute('user.logout');
  $variables['loggedinblock'] = \Drupal::theme()->render('username', array('account' => $variables['account'])) .' | ' . \Drupal::l(t('Log out'), $url);
}


/**
 * Custom theme function for the login/register link.
 */
function template_preprocess_lt_login_link(&$variables) {
  // Only display register text if registration is allowed.
  if (\Drupal::config('user.settings')->get('admin_role')) {
    $variables['login_link_text'] = t('Log in/Register');
  }
  else {
    $variables['login_link_text'] = t('Log in');
  }
}


/**
 * Use this to pass variables to the twig template
 *
 * @param $variables
 */
function template_preprocess_lt_unified_login_button(&$variables) {
  $variables['buttons_title'] = t('Login or register as a new user');
}


/**
 * For login routes, change forms rendered to support unified page and 403 login
 *
 * @param $variables
 *
 */
function logintoboggan_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $unified = \Drupal::config('logintoboggan.settings')->get('unified_login');

  if (($route_name == 'user.login' && $unified == '1') || ($route_name == 'user.register' && $unified == '1') ||
    ($route_name == 'logintoboggan.denied' && !$variables['logged_in'])) {

    $variables['#attached']['library'][] = 'logintoboggan/logintoboggan-styles';

    $theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
    $theme_content = $theme . '_content';
    $theme_tasks = $theme . '_local_tasks';

    $variables['page']['content'][$theme_content] = [];
    $variables['page']['content'][$theme_tasks] = [];


    if (!\Drupal::currentUser()->id()) {
      $login_form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserLoginForm::class) ;
      if ($unified == '1') {
        $variables['page']['content']['login_link'] = [
          '#theme' => 'lt_unified_login_button',
        ];
        $variables['#attached']['library'][] = 'logintoboggan/logintoboggan_unified';
        $active_form = $route_name == 'user.register' ? 'register' : 'login';
        $variables['#attached']['drupalSettings']['LoginToboggan']['unifiedLoginActiveForm'] = $active_form;
        $variables['page']['content']['login_form'] = $login_form;

        $entity = \Drupal::entityTypeManager()->getStorage('user')->create([]);
        $formObject = \Drupal::entityTypeManager()
          ->getFormObject('user', 'register')
          ->setEntity($entity);
        $reg_form = \Drupal::formBuilder()->getForm($formObject);
        $variables['page']['content']['registration_form'] = $reg_form;

        $pass_form = Drupal::formBuilder()
          ->getForm(Drupal\user\Form\UserPasswordForm::class);
        $variables['page']['content']['pass_form'] = $pass_form;
      } else {
        //login form can get displayed on 403 regardless of unified setting
        $site_403 = \Drupal::config('logintoboggan.settings')->get('site_403');
        if($site_403) {
          $variables['page']['content']['login_form'] = $login_form;
        }
      }
    }
  }
}